# Unified Parcel-Lang Syntax

# Variable Declaration
let greeting be "Hello, Parcel-Lang!"

# Function Declaration
fun add(x: Int, y: Int) -> Int {
    return x + y
}

# Higher-Order Function
let multiply = \x y -> x * y

# Control Flow
if condition {
    # code
} elif anotherCondition {
    # code
} else {
    # code
}

match value {
    Pattern1 -> # code
    Pattern2 | Pattern3 if someCondition -> # code
    _        -> # code
}

# Concurrency
suspend fun fetchData() {
    # asynchronous code
}

let result = await fetchData()

# Interoperability
let cppResult = C++ {
    # C++ code
}

let rustResult = Rust {
    # Rust code
}

let bashOutput = Bash {
    echo "Hello, Parcel-Lang!"
}

# NLP-Style Syntax
let result be the sum of 5 and 10

# Scripting and Shell Integration
execute command {
    echo "Hello, Parcel-Lang!"
}

if someCondition:
    # indented script block

# Error Handling
let result = doSomething()
match result {
    Ok(value) -> # handle success
    Err(error) -> # handle error
}

# Ownership and Borrowing (Rust-inspired)
let data = vec![1, 2, 3]
let result = process(data)  # Ownership transferred

# Advanced Features
trait Printable {
    fun print()
}

struct Book: Printable {
    # implementation
}

let books: List<Book> = # some list of books
[book.print() for book in books]

# Example Parcel-Lang Program
let sum be the result of adding 5 and 10
print("The sum is: \(sum)")

fun main() {
    print(greeting)
    
    let product = multiply(3)(4)
    print("The product is: \(product)")
}
